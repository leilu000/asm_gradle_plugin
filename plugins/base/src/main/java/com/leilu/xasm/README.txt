功能点：
1、添加一个新的类:
    添加：
        构造方法、方法、属性、注解（类上的注解、属性上的注解、方法上的注解）
    删除：
        构造方法、方法、属性、注解（批量或者单个类上的注解、属性上的注解、方法上的注解）

2、修改一个存在的类：
    添加：
        构造方法、方法、属性、注解（类上的注解、属性上的注解、方法上的注解）
    删除：
        构造方法、方法、属性、注解（批量或者单个类上的注解、属性上的注解、方法上的注解）
    hook：
        修改属性
        修改方法：
            在方法开始插入代码、在方法中间插入代码、替换方法体中的类的创建和方法的调用、替换方法提的全部代码（只需要新增一个
            相同名字和签名的方法，框架会删除旧的方法，增加新的方法）


修改类的逻辑：
    1、删除属性对应的注解
        拿到对应的需要删除的集合，一个个返回null就好
    1、给属性添加注解
        因为一个属性可能有很多注解，而且可能新添加的注解在以前就已经存在，所以这里的实现逻辑是，如果以前存在相同注解，则先删除
        掉旧的，然后再添加新的注解，此时就需要留意下面的坑

        添加属性注解遇到的坑：
        思路是，如果在添加新注解的时候，以前该属性上本来就有相同的注解了，但可能对应的值不一样，则我会先删除以前，
        然后再去添加新的，调用代码的流程如下：
        1、重写FieldVisitor的visitAnnotation方法
        2、重写FieldVisitor的visitEnd方法
        然后visitAnnotation中判断是否有需要删除的注解，如果有则则直接将方法返回null即可
        然后在visitEnd方法调用visitAnnotation方法添加新的注解
        出现的问题就是：当我在visitEnd方法中添加新注解的时候，根本没有添加添加上，跟了一下逻辑，通过断点发现，如果该属性中以前没有任何注解
        ，则不会调用到visitAnnotation方法，直接就调了visitEnd方法，我在visitEnd方法中添加了新的注解，此时会调用到visitAnnotation方法
        ，在方法中我又把新添加的注解给删除了，所以永远都不会有新的注解添加

        通过上面的踩坑发现：
        FieldVisitor中，如果属性没有注解，则不会调用到visitAnnotation，会直接调用到visitEnd；如果以前有，则会先调用visitAnnotation方法然后
        再调用visitEnd。同样，MethodVisitor也是一样的，这里一定要注意